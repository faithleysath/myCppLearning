// 如果通过声明来创建数组，则在程序被编译时将为它分配内存空间。在编译时给数组分配内存被称为静态联编（static binding），这意味着数组是在编译时加入到程序中的。
// 但使用new时，在运行阶段需要数组，则创建；如果不需要，则不创建。还可以在程序运行时选择数组的长度。这被称为动态联编（dynamic binding），意味着数组是在程序运行时创建的，这种数组叫做动态数组。
// 使用静态联编时，必须在编写程序时指定数组的长度；使用动态联编时，程序将在运行时确定数组的长度
#include <iostream>
using namespace std;
int main()
{
// 1.使用new创建动态数组
    int * psome = new int [10];

    cout << psome << endl;
    delete [] psome; // 方括号告诉程序，应释放整个数组，而不仅仅是指针指向的元素
    cout << psome << endl; // 说明delete并没有将指针置空，而是将指针指向的内存空间置空

/*
总之，使用new和delete时，应遵守以下规则。
- 不要使用delete来释放不是new分配的内存
- 不要使用delete释放同一个内存块两次
- 如果使用new []为数组分配内存，则应使用delete []来释放
- 如果使用new []为一个实体分配内存，则应使用delete（没有方括号）来释放。
- 对空指针应用delete是安全的。
*/

// psome是指向一个int（数组的第一个元素）的指针。由于编译器不能对psome是指向10个整数中的第1个这种情况进行跟踪，因此编写程序时，必须让程序跟踪元素的数目。
// 实际上，程序确实跟踪了分配的内存量，以便以后使用delete []运算符时能正确地释放这些内存。但这种信息不是公用的，例如，不能使用sizeof运算符来确定动态分配的数组包含的字节数。

// 为数组分配内存的通用格式如下：type * name = new type [number];
// name将指向第1个元素。

// 2.使用动态数组
    psome = new int [10];
    // 可以将psome看作一根指向该元素的手指。假设int占4个字节，则将手指沿正确的方向移动4个字节，就可以指向下一个元素。总共有10个元素，这就是手指移动范围。因此，new语句提供了识别内存块中每个元素所需的全部信息。
    // 现在考虑如何访问其中的元素。
    // 访问第一个元素不成问题，因为psome指向数组的第1个元素。因此*psome就是数组的第1个元素的值。
    // 访问其他元素也很简单，只要把指针当作数组名使用即可。也就是说，可以使用psome[1]、psome[2]等来访问数组的其他元素。
    // 可以这样做的原因是，C和C++内部都使用指针来处理数组。指针和数组基本等价。
    return 0;
}